import java.util.ArrayList;

/**
 * Manage the stock in a business.
 * The stock is described by zero or more Products.
 * 
 * @author Hakeem Khares 
 * @version 1.0
 */
public class StockList
{
    
    private ArrayList<Product> stock;

    /**
     * Initialise the stock manager.
     */
    public StockList()
    {
        stock = new ArrayList<Product>();
    }

    /**
     * Add a product to the list.
     * @param item The product item to be added.
     */
    public void add(Product item)
    {
        stock.add(item);
    }
    
       /**
     * Remove a product to the list.
     * @param item The product item to be added.
     */
    public void remove(Product item)
    {
        stock.remove(item);
    }
    
    /**
     * A method to buy a single quantity of the product
     */
    public void buyProduct(int productID)
    {
        buyProduct(productID, 1);
    }
    
    
    /**
     * Buy a quantity of a particular product.
     * Increase the quantity of the product by the given amount.
     * @param id The ID of the product.
     * @param amount The amount to increase the quantity by.
     */
    public void buyProduct(int productID, int amount)
    {
        Product product = findProduct(productID);
        if(product != null)
        {
            if(product.getQuantity() < 1000)
            {    product.increaseQuantity(amount);
            System.out.println(" Bought " + amount + " of " 
            + product.getName());
            }
            else
            {
                System.out.println("Not enough shelf space for " 
                + product.getName() + ". Please sell existing stock. ");
            }
        }
        else
        {
            System.out.println("Couldn't find product.");
        }    
    }
    
    /**
     * Find a product to match the product id,
     * if not found return null
     */
    public Product findProduct(int productID)
    {
        for(Product product : stock)
        {
            if(product.getID() == productID)
            {
                return product; 
            }   
        }
        return null;
    }
    
    /**
     * Sell one of the given product.
     * Show the before and after status of the product.
     * @param id the ID of the product being sold.
     */
    public void sellProduct(int productID)
    {
        sellProduct(productID, 1);
    }
    /**
     * Sell many of the given product.
     * Show the before and after status of the product.
     * @param id The ID of the product being sold.
     */
    public void sellProduct(int productID, int amount)
    {
        Product product = findProduct(productID);
        
        if(product != null) 
        {
            if(product.getQuantity() > 0)
            {
                product.decreaseQuantity(amount);
                System.out.println("Sold " + amount + " of " 
                                    + product.getName());
                
            }
            else
            {
                System.out.println("The Product " + product.getName() 
                                      + "is out of stock");
                
            }
        }
        else
        {
            System.out.println("Couldn't find product");
            
        }
    }    

    
    /**
     * Locate a product with the given ID, and return how
     * many of this item are in stock. If the ID does not
     * match any product, return zero.
     * @param id The ID of the product.
     * @return The quantity of the given product in stock.
     */
    public int numberInStock(int productID)
    {
        return 0;
    }

    /**
     * Print details of the given product. If found,
     * its name and stock quantity will be shown.
     * @param id The ID of the product to look for.
     */
    public void printProduct(int productID)
    {
        Product product = findProduct(productID);
        
        if(product != null) 
        {
            System.out.println(product.toString());
        }
    }
    
    /**
     * Print out each product in the stock
     * in the order they are in the stock list
     */
    public void print()
    {
        printHeading();
        
        for(Product product : stock)
        {
            System.out.println(product);
        }

        System.out.println();
    }
    
    public void printHeading()
    {
        System.out.println();
        System.out.println(" Hakeem's Stock List");
        System.out.println(" ====================");
        System.out.println();
    }
}


/**
 * Model some details of a product sold by a company.
 * 
 * @author Hakeem Khares
 * @version 1.0
 */
public class Product
{
    // An identifying number for this product.
    private int id;
    // The name of this product.
    private String name;
    // The quantity of this product in stock.
    private int quantity;

    /**
     * Constructor for objects of class Product.
     * The initial stock quantity is zero.
     * @param id The product's identifying number.
     * @param name The product's name.
     */
    public Product(int id, String name)
    {
        this.id = id;
        this.name = name;
        
        quantity = 0;
    }

    /**
     * @return The product's id.
     */
    public int getID()
    {
        return id;
    }

    /**
     * @return The product's name.
     */
    public String getName()
    {
        return name;
    }

    /**
     * @return The quantity in stock.
     */
    public int getQuantity()
    {
        return quantity;
    }

    public void setQuantity(int quantity)
    {
        this.quantity = quantity;
    }
    
    public void increaseQuantity(int amount)
    {
        quantity = quantity + amount;
    }
    
    public void decreaseQuantity(int amount)
    {
        if(quantity >= amount)
            quantity = quantity - amount;
    }
    
    /**
     * @return The id, name and quantity in stock.
     */
    public String toString()
    {
        return " ID " + id + ": " +  name + " stock level: " + quantity;
    }

    
    public void print()
    {
        System.out.println(toString());
    }
}



import java.util.Random;
/**
 * Demonstrate the StockManager and Product classes.
 * The demonstration becomes properly functional as
 * the StockManager class is completed.
 * 
 * @author Hakeem Khares
 * @version 1.0 , 15/11/2021
 */
public class StockDemo
{
    // The stock manager.
    private StockList stock;
    
    private Random generator = new Random();

    /**
     * Create a StockManager and populate it with at least
     * 10 sample products.
     */
    public StockDemo()
    {
        this.stock = new StockList();
        
        stock.add(new Product(101, "Samsung Galaxy S20"));
        stock.add(new Product(102, "Apple iPhone 12"));
        stock.add(new Product(103, "Google Pixel 4A"));
        stock.add(new Product(104, "Samsung Galaxy S10"));
        stock.add(new Product(105, "Apple iPhone 13"));
        stock.add(new Product(106, "Samsung Galaxy S21"));
        stock.add(new Product(107, "Samsung Galaxy S21 Ultra"));
        stock.add(new Product(108, "Samsung Z Flip3"));
        stock.add(new Product(109, "Samsung Galaxy Buds2"));
        stock.add(new Product(110, "Apple AirProds Pro"));
        
        runDemo();
    }
    
    /**
     * Provide a demonstration of how the ProductList meets all
     * the user requirements by making a delivery of each product 
     * buying it in various amounts and then selling each
     * product by various amounts. Make sure all the requirements
     * have been demonstrated.
     */
    public void runDemo()
    {
        // Show details of all of the products before delivery.
        
        stock.print();

        buyProducts();
        stock.print();        

        sellProducts();   
        stock.print();
    }
    
    /**
     * This method will buy different quantities of each of the products
     * in the stock list.
     */
    private void buyProducts()
    {
        stock.buyProduct(101, 500);
        stock.buyProduct(102, 560);
        stock.buyProduct(103, 530);
        stock.buyProduct(104, 520);
        stock.buyProduct(105, 580);
        stock.buyProduct(106, 550);
        stock.buyProduct(107, 550);
        stock.buyProduct(108, 530);
        stock.buyProduct(109, 510);
        stock.buyProduct(110, 610);
    }

    private void sellProducts()
    {
        stock.sellProduct(101, 390);
        stock.sellProduct(102, 370);
        stock.sellProduct(103, 360);
        stock.sellProduct(104, 340);
        stock.sellProduct(105, 320);
        stock.sellProduct(106, 350);
        stock.sellProduct(107, 310);
        stock.sellProduct(108, 310);
        stock.sellProduct(109, 360);
        stock.sellProduct(110, 340);
    }    
}